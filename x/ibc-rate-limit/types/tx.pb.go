// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/ibc_rate_limit/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateIBCDenomsRateLimit defines the Msg/UpdateIBCDenomsRateLimit request type.
type MsgUpdateIBCDenomsRateLimit struct {
	// authority is the address of the governance account.
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// new_ibc_denoms_rate_limits defines the rate limits for ibc denoms tokens.
	NewIbcDenomsRateLimits []RateLimit `protobuf:"bytes,4,rep,name=new_ibc_denoms_rate_limits,json=newIbcDenomsRateLimits,proto3" json:"new_ibc_denoms_rate_limits"`
	// update_ibc_denoms_rate_limits defines the new rate limits for ibc denoms tokens.
	UpdateIbcDenomsRateLimits []RateLimit `protobuf:"bytes,5,rep,name=update_ibc_denoms_rate_limits,json=updateIbcDenomsRateLimits,proto3" json:"update_ibc_denoms_rate_limits"`
}

func (m *MsgUpdateIBCDenomsRateLimit) Reset()      { *m = MsgUpdateIBCDenomsRateLimit{} }
func (*MsgUpdateIBCDenomsRateLimit) ProtoMessage() {}
func (*MsgUpdateIBCDenomsRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1017ebe9ced903d, []int{0}
}
func (m *MsgUpdateIBCDenomsRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCDenomsRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCDenomsRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCDenomsRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCDenomsRateLimit.Merge(m, src)
}
func (m *MsgUpdateIBCDenomsRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCDenomsRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCDenomsRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCDenomsRateLimit proto.InternalMessageInfo

func (*MsgUpdateIBCDenomsRateLimit) XXX_MessageName() string {
	return "umee.ibcratelimit.v1beta1.MsgUpdateIBCDenomsRateLimit"
}

// MsgUpdateIBCDenomsRateLimitResponse defines response type for the Msg/UpdateIBCDenomsRateLimit
type MsgUpdateIBCDenomsRateLimitResponse struct {
}

func (m *MsgUpdateIBCDenomsRateLimitResponse) Reset()         { *m = MsgUpdateIBCDenomsRateLimitResponse{} }
func (m *MsgUpdateIBCDenomsRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIBCDenomsRateLimitResponse) ProtoMessage()    {}
func (*MsgUpdateIBCDenomsRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1017ebe9ced903d, []int{1}
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCDenomsRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCDenomsRateLimitResponse.Merge(m, src)
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCDenomsRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCDenomsRateLimitResponse proto.InternalMessageInfo

func (*MsgUpdateIBCDenomsRateLimitResponse) XXX_MessageName() string {
	return "umee.ibcratelimit.v1beta1.MsgUpdateIBCDenomsRateLimitResponse"
}

// MsgUpdateIBCTransferPauseStatus defines request type for UpdateIBCTransferStatus
type MsgUpdateIBCTransferPauseStatus struct {
	// authority is the address of the governance account.
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ibc_pause_status defines ibc transfer pause status
	IbcPauseStatus bool `protobuf:"varint,4,opt,name=ibc_pause_status,json=ibcPauseStatus,proto3" json:"ibc_pause_status,omitempty"`
}

func (m *MsgUpdateIBCTransferPauseStatus) Reset()      { *m = MsgUpdateIBCTransferPauseStatus{} }
func (*MsgUpdateIBCTransferPauseStatus) ProtoMessage() {}
func (*MsgUpdateIBCTransferPauseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1017ebe9ced903d, []int{2}
}
func (m *MsgUpdateIBCTransferPauseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCTransferPauseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCTransferPauseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCTransferPauseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCTransferPauseStatus.Merge(m, src)
}
func (m *MsgUpdateIBCTransferPauseStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCTransferPauseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCTransferPauseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCTransferPauseStatus proto.InternalMessageInfo

func (*MsgUpdateIBCTransferPauseStatus) XXX_MessageName() string {
	return "umee.ibcratelimit.v1beta1.MsgUpdateIBCTransferPauseStatus"
}

// MsgUpdateIBCTransferPauseStatusResponse definesresponse type for Msg/MsgUpdateIBCTransferPauseStatus
type MsgUpdateIBCTransferPauseStatusResponse struct {
}

func (m *MsgUpdateIBCTransferPauseStatusResponse) Reset() {
	*m = MsgUpdateIBCTransferPauseStatusResponse{}
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIBCTransferPauseStatusResponse) ProtoMessage()    {}
func (*MsgUpdateIBCTransferPauseStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1017ebe9ced903d, []int{3}
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCTransferPauseStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCTransferPauseStatusResponse.Merge(m, src)
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCTransferPauseStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCTransferPauseStatusResponse proto.InternalMessageInfo

func (*MsgUpdateIBCTransferPauseStatusResponse) XXX_MessageName() string {
	return "umee.ibcratelimit.v1beta1.MsgUpdateIBCTransferPauseStatusResponse"
}
func init() {
	proto.RegisterType((*MsgUpdateIBCDenomsRateLimit)(nil), "umee.ibcratelimit.v1beta1.MsgUpdateIBCDenomsRateLimit")
	proto.RegisterType((*MsgUpdateIBCDenomsRateLimitResponse)(nil), "umee.ibcratelimit.v1beta1.MsgUpdateIBCDenomsRateLimitResponse")
	proto.RegisterType((*MsgUpdateIBCTransferPauseStatus)(nil), "umee.ibcratelimit.v1beta1.MsgUpdateIBCTransferPauseStatus")
	proto.RegisterType((*MsgUpdateIBCTransferPauseStatusResponse)(nil), "umee.ibcratelimit.v1beta1.MsgUpdateIBCTransferPauseStatusResponse")
}

func init() {
	proto.RegisterFile("umee/ibc_rate_limit/v1beta1/tx.proto", fileDescriptor_d1017ebe9ced903d)
}

var fileDescriptor_d1017ebe9ced903d = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x25, 0x29, 0xa2, 0x57, 0x09, 0x21, 0x2b, 0x2a, 0x8e, 0x01, 0x27, 0x0a, 0x45, 0x04,
	0xa4, 0xd8, 0xa4, 0x95, 0x3a, 0x74, 0x40, 0xc2, 0xb0, 0x54, 0xa2, 0x12, 0x72, 0x41, 0x42, 0x2c,
	0x96, 0x7f, 0x5c, 0xdd, 0x13, 0xb1, 0xcf, 0xba, 0x7b, 0x4e, 0xda, 0x95, 0x89, 0x11, 0x31, 0x31,
	0xa1, 0xfe, 0x09, 0x0c, 0x6c, 0xfc, 0x03, 0x19, 0x2b, 0x58, 0x98, 0x10, 0x24, 0x03, 0x7f, 0x04,
	0x0b, 0x3a, 0x3b, 0xa1, 0x01, 0x35, 0x06, 0x3a, 0x30, 0xd9, 0x77, 0xef, 0xfb, 0xfc, 0x7d, 0xef,
	0x7b, 0xd6, 0xc3, 0x6b, 0x59, 0x4c, 0x88, 0x45, 0xfd, 0xc0, 0xe5, 0x1e, 0x10, 0xb7, 0x4f, 0x63,
	0x0a, 0xd6, 0xa0, 0xe7, 0x13, 0xf0, 0x7a, 0x16, 0x1c, 0x98, 0x29, 0x67, 0xc0, 0xd4, 0x86, 0x44,
	0x99, 0xd4, 0x0f, 0x24, 0x28, 0xc7, 0x98, 0x53, 0x8c, 0x5e, 0x8f, 0x58, 0xc4, 0x72, 0x94, 0x25,
	0xdf, 0x0a, 0x82, 0x7e, 0x29, 0x60, 0x22, 0x66, 0xc2, 0x8a, 0x45, 0x64, 0x0d, 0x7a, 0xf2, 0x31,
	0x2d, 0x34, 0x8a, 0x82, 0x5b, 0x30, 0x8a, 0xc3, 0xb4, 0x74, 0xbb, 0xcc, 0xca, 0xaf, 0xd7, 0x05,
	0xa3, 0xfd, 0xbd, 0x82, 0x2f, 0xef, 0x88, 0xe8, 0x71, 0x1a, 0x7a, 0x40, 0xb6, 0xed, 0x7b, 0xf7,
	0x49, 0xc2, 0x62, 0xe1, 0x78, 0x40, 0x1e, 0x48, 0x94, 0xba, 0x89, 0x97, 0xbd, 0x0c, 0xf6, 0x19,
	0xa7, 0x70, 0xa8, 0xa1, 0x16, 0xea, 0x2c, 0xdb, 0xda, 0x87, 0x77, 0xdd, 0xfa, 0x54, 0xf6, 0x6e,
	0x18, 0x72, 0x22, 0xc4, 0x2e, 0x70, 0x9a, 0x44, 0xce, 0x09, 0x54, 0xad, 0xe3, 0x25, 0xa0, 0xd0,
	0x27, 0x5a, 0x45, 0x72, 0x9c, 0xe2, 0xa0, 0xb6, 0xf0, 0x4a, 0x48, 0x44, 0xc0, 0x69, 0x0a, 0x94,
	0x25, 0x5a, 0x35, 0xaf, 0xcd, 0x5f, 0xa9, 0x7b, 0x58, 0x4f, 0xc8, 0xd0, 0x95, 0x5e, 0xc3, 0xdc,
	0xca, 0x9c, 0x65, 0xa1, 0xd5, 0x5a, 0xd5, 0xce, 0xca, 0xfa, 0x9a, 0xb9, 0x30, 0x4b, 0xf3, 0xa7,
	0x73, 0xbb, 0x36, 0xfa, 0xdc, 0x54, 0x9c, 0xd5, 0x84, 0x0c, 0xb7, 0xfd, 0xe0, 0xb7, 0xb6, 0x84,
	0xda, 0xc7, 0x57, 0xb3, 0xbc, 0xe7, 0x45, 0x52, 0x4b, 0xff, 0x2c, 0xd5, 0x28, 0x3e, 0x78, 0x8a,
	0xda, 0xd6, 0xea, 0x8b, 0xa3, 0xa6, 0xf2, 0xfa, 0xa8, 0xa9, 0x3c, 0xff, 0xf6, 0xf6, 0xd6, 0x49,
	0x4a, 0xed, 0xeb, 0xf8, 0x5a, 0x49, 0xf8, 0x0e, 0x11, 0x29, 0x4b, 0x04, 0x69, 0x7f, 0x44, 0xb8,
	0x39, 0x8f, 0x7b, 0xc4, 0xbd, 0x44, 0xec, 0x11, 0xfe, 0xd0, 0xcb, 0x04, 0xd9, 0x05, 0x0f, 0x32,
	0xf1, 0xdf, 0x07, 0xd5, 0xc1, 0x17, 0x65, 0x72, 0xa9, 0xb4, 0xe0, 0x8a, 0xdc, 0x83, 0x56, 0x6b,
	0xa1, 0xce, 0x79, 0xe7, 0x02, 0xf5, 0x83, 0x39, 0x67, 0x0b, 0x9b, 0xbf, 0x89, 0x6f, 0xfc, 0xa1,
	0xa9, 0x59, 0x00, 0xeb, 0xef, 0x2b, 0xb8, 0xba, 0x23, 0x22, 0xf5, 0x15, 0xc2, 0xda, 0xe2, 0x5f,
	0xb5, 0x64, 0x56, 0x25, 0x29, 0xeb, 0x77, 0xce, 0xc6, 0x9b, 0x99, 0x53, 0xdf, 0x20, 0x7c, 0xa5,
	0x74, 0x34, 0x5b, 0x7f, 0x29, 0x70, 0x0a, 0x57, 0xb7, 0xcf, 0xce, 0x9d, 0x19, 0xb4, 0x9f, 0x8c,
	0xbe, 0x1a, 0xca, 0x68, 0x6c, 0xa0, 0xe3, 0xb1, 0x81, 0xbe, 0x8c, 0x0d, 0xf4, 0x72, 0x62, 0x28,
	0xa3, 0x89, 0x81, 0x8e, 0x27, 0x86, 0xf2, 0x69, 0x62, 0x28, 0x4f, 0x37, 0x23, 0x0a, 0xfb, 0x99,
	0x6f, 0x06, 0x2c, 0xb6, 0xa4, 0x5e, 0x37, 0x21, 0x30, 0x64, 0xfc, 0x59, 0x7e, 0xb0, 0x06, 0x1b,
	0xd6, 0x81, 0xdc, 0x1e, 0x5d, 0x69, 0xa1, 0x5b, 0x2c, 0x15, 0x38, 0x4c, 0x89, 0xf0, 0xcf, 0xe5,
	0x4b, 0x64, 0xe3, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xbe, 0x8a, 0xc2, 0x03, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateIBCDenomsRateLimit adds new rate limits for ibc denoms or
	// updates the rate limits for existed ibc denoms.
	UpdateIBCDenomsRateLimit(ctx context.Context, in *MsgUpdateIBCDenomsRateLimit, opts ...grpc.CallOption) (*MsgUpdateIBCDenomsRateLimitResponse, error)
	// UpdateIBCTransferPauseStatus
	UpdateIBCTransferPauseStatus(ctx context.Context, in *MsgUpdateIBCTransferPauseStatus, opts ...grpc.CallOption) (*MsgUpdateIBCTransferPauseStatusResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateIBCDenomsRateLimit(ctx context.Context, in *MsgUpdateIBCDenomsRateLimit, opts ...grpc.CallOption) (*MsgUpdateIBCDenomsRateLimitResponse, error) {
	out := new(MsgUpdateIBCDenomsRateLimitResponse)
	err := c.cc.Invoke(ctx, "/umee.ibcratelimit.v1beta1.Msg/UpdateIBCDenomsRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateIBCTransferPauseStatus(ctx context.Context, in *MsgUpdateIBCTransferPauseStatus, opts ...grpc.CallOption) (*MsgUpdateIBCTransferPauseStatusResponse, error) {
	out := new(MsgUpdateIBCTransferPauseStatusResponse)
	err := c.cc.Invoke(ctx, "/umee.ibcratelimit.v1beta1.Msg/UpdateIBCTransferPauseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateIBCDenomsRateLimit adds new rate limits for ibc denoms or
	// updates the rate limits for existed ibc denoms.
	UpdateIBCDenomsRateLimit(context.Context, *MsgUpdateIBCDenomsRateLimit) (*MsgUpdateIBCDenomsRateLimitResponse, error)
	// UpdateIBCTransferPauseStatus
	UpdateIBCTransferPauseStatus(context.Context, *MsgUpdateIBCTransferPauseStatus) (*MsgUpdateIBCTransferPauseStatusResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateIBCDenomsRateLimit(ctx context.Context, req *MsgUpdateIBCDenomsRateLimit) (*MsgUpdateIBCDenomsRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIBCDenomsRateLimit not implemented")
}
func (*UnimplementedMsgServer) UpdateIBCTransferPauseStatus(ctx context.Context, req *MsgUpdateIBCTransferPauseStatus) (*MsgUpdateIBCTransferPauseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIBCTransferPauseStatus not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateIBCDenomsRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIBCDenomsRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateIBCDenomsRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ibcratelimit.v1beta1.Msg/UpdateIBCDenomsRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateIBCDenomsRateLimit(ctx, req.(*MsgUpdateIBCDenomsRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateIBCTransferPauseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIBCTransferPauseStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateIBCTransferPauseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umee.ibcratelimit.v1beta1.Msg/UpdateIBCTransferPauseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateIBCTransferPauseStatus(ctx, req.(*MsgUpdateIBCTransferPauseStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umee.ibcratelimit.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateIBCDenomsRateLimit",
			Handler:    _Msg_UpdateIBCDenomsRateLimit_Handler,
		},
		{
			MethodName: "UpdateIBCTransferPauseStatus",
			Handler:    _Msg_UpdateIBCTransferPauseStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/ibc_rate_limit/v1beta1/tx.proto",
}

func (m *MsgUpdateIBCDenomsRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCDenomsRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCDenomsRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdateIbcDenomsRateLimits) > 0 {
		for iNdEx := len(m.UpdateIbcDenomsRateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateIbcDenomsRateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NewIbcDenomsRateLimits) > 0 {
		for iNdEx := len(m.NewIbcDenomsRateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewIbcDenomsRateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIBCDenomsRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCDenomsRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCDenomsRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIBCTransferPauseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCTransferPauseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCTransferPauseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcPauseStatus {
		i--
		if m.IbcPauseStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIBCTransferPauseStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCTransferPauseStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCTransferPauseStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateIBCDenomsRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.NewIbcDenomsRateLimits) > 0 {
		for _, e := range m.NewIbcDenomsRateLimits {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.UpdateIbcDenomsRateLimits) > 0 {
		for _, e := range m.UpdateIbcDenomsRateLimits {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateIBCDenomsRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIBCTransferPauseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IbcPauseStatus {
		n += 2
	}
	return n
}

func (m *MsgUpdateIBCTransferPauseStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateIBCDenomsRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCDenomsRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCDenomsRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIbcDenomsRateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewIbcDenomsRateLimits = append(m.NewIbcDenomsRateLimits, RateLimit{})
			if err := m.NewIbcDenomsRateLimits[len(m.NewIbcDenomsRateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIbcDenomsRateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateIbcDenomsRateLimits = append(m.UpdateIbcDenomsRateLimits, RateLimit{})
			if err := m.UpdateIbcDenomsRateLimits[len(m.UpdateIbcDenomsRateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIBCDenomsRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCDenomsRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCDenomsRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIBCTransferPauseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCTransferPauseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCTransferPauseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcPauseStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IbcPauseStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIBCTransferPauseStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCTransferPauseStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCTransferPauseStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
