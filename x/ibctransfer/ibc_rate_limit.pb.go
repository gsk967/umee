// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/ibctransfer/v1/ibc_rate_limit.proto

package ibctransfer

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RateLimit is format of ibc rate limit
type RateLimit struct {
	// ibc_denom defines the ibc denom
	IbcDenom string `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	// outflow_limit defines the outflow limit of ibc-transfer
	OutflowLimit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=outflow_limit,json=outflowLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_limit"`
	// time_window defines window for rate limit of ibc_denom
	TimeWindow time.Duration `protobuf:"bytes,3,opt,name=time_window,json=timeWindow,proto3,stdduration" json:"time_window,omitempty" yaml:"time_window"`
	// expired_time defines rate limit expires time based on time_window
	ExpiredTime *time.Time `protobuf:"bytes,4,opt,name=expired_time,json=expiredTime,proto3,stdtime" json:"expired_time,omitempty" yaml:"expired_time"`
	// outflow_sum defines the sum of outflow tokens from ibc-transfer
	OutflowSum github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=outflow_sum,json=outflowSum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_sum"`
	// denom_exponent defines the exponent of base_denom
	DenomExponent int64 `protobuf:"varint,6,opt,name=denom_exponent,json=denomExponent,proto3" json:"denom_exponent,omitempty"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f0bd87eec74136, []int{0}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return m.Size()
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *RateLimit) GetTimeWindow() time.Duration {
	if m != nil {
		return m.TimeWindow
	}
	return 0
}

func (m *RateLimit) GetExpiredTime() *time.Time {
	if m != nil {
		return m.ExpiredTime
	}
	return nil
}

func (m *RateLimit) GetDenomExponent() int64 {
	if m != nil {
		return m.DenomExponent
	}
	return 0
}

// Params of x/ibc-rate-limit module
type Params struct {
	// ibc_status defines the wethever ibc-transfer allow or not
	IbcPause bool `protobuf:"varint,1,opt,name=ibc_pause,json=ibcPause,proto3" json:"ibc_pause,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f0bd87eec74136, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIbcPause() bool {
	if m != nil {
		return m.IbcPause
	}
	return false
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "umee.ibctransfer.v1.RateLimit")
	proto.RegisterType((*Params)(nil), "umee.ibctransfer.v1.Params")
}

func init() {
	proto.RegisterFile("umee/ibctransfer/v1/ibc_rate_limit.proto", fileDescriptor_45f0bd87eec74136)
}

var fileDescriptor_45f0bd87eec74136 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0x6e, 0x5c, 0x2d, 0xdb, 0xe9, 0xae, 0x87, 0xac, 0x42, 0xb6, 0x42, 0xa6, 0x04, 0x56, 0x7a,
	0xb0, 0x09, 0xeb, 0x1e, 0x04, 0xf1, 0x54, 0x2a, 0x5e, 0x3c, 0x2c, 0x51, 0x10, 0x04, 0x0d, 0x93,
	0xe4, 0x6d, 0x1c, 0xb6, 0x93, 0x09, 0x99, 0x49, 0x3f, 0xfe, 0xc5, 0x1e, 0xfd, 0x21, 0xfe, 0x88,
	0x1e, 0x17, 0x4f, 0xe2, 0x21, 0x4a, 0x0b, 0x1e, 0x3c, 0xee, 0x2f, 0x90, 0x99, 0x4c, 0x21, 0xe8,
	0xd5, 0x53, 0xf2, 0x3c, 0xef, 0xc7, 0xf3, 0xbc, 0xef, 0x3b, 0x68, 0x54, 0x31, 0x80, 0x80, 0xc6,
	0x89, 0x2c, 0x49, 0x2e, 0x66, 0x50, 0x06, 0x8b, 0x73, 0x05, 0xa3, 0x92, 0x48, 0x88, 0xe6, 0x94,
	0x51, 0xe9, 0x17, 0x25, 0x97, 0xdc, 0x3e, 0x51, 0x99, 0x7e, 0x2b, 0xd3, 0x5f, 0x9c, 0x0f, 0x1e,
	0x64, 0x3c, 0xe3, 0x3a, 0x1e, 0xa8, 0xbf, 0x26, 0x75, 0xe0, 0x66, 0x9c, 0x67, 0x73, 0x08, 0x34,
	0x8a, 0xab, 0x59, 0x90, 0x56, 0x25, 0x91, 0x94, 0xe7, 0x26, 0x8e, 0xff, 0x8e, 0x4b, 0xca, 0x40,
	0x48, 0xc2, 0x0a, 0x93, 0x70, 0x9a, 0x70, 0xc1, 0xb8, 0x88, 0x9a, 0xce, 0x0d, 0x68, 0x42, 0xde,
	0xaf, 0x03, 0xd4, 0x0b, 0x89, 0x84, 0xd7, 0xca, 0x9a, 0xfd, 0x08, 0xf5, 0x94, 0xd9, 0x14, 0x72,
	0xce, 0x1c, 0x6b, 0x68, 0x8d, 0x7a, 0xe1, 0x21, 0x8d, 0x93, 0xa9, 0xc2, 0x36, 0x41, 0xc7, 0xbc,
	0x92, 0xb3, 0x39, 0x5f, 0x36, 0x83, 0x38, 0x77, 0x54, 0xc2, 0xe4, 0xc5, 0xa6, 0xc6, 0x9d, 0xef,
	0x35, 0x7e, 0x9c, 0x51, 0xf9, 0xa9, 0x8a, 0xfd, 0x84, 0x33, 0x23, 0x61, 0x3e, 0x63, 0x91, 0x5e,
	0x05, 0x72, 0x5d, 0x80, 0xf0, 0xa7, 0x90, 0x7c, 0xfd, 0x32, 0x46, 0xc6, 0xc1, 0x14, 0x92, 0xf0,
	0xc8, 0xb4, 0x6c, 0xf4, 0x05, 0xea, 0x2b, 0xef, 0xd1, 0x92, 0xe6, 0x29, 0x5f, 0x3a, 0x07, 0x43,
	0x6b, 0xd4, 0x7f, 0x7a, 0xea, 0x37, 0xf3, 0xf9, 0xfb, 0xf9, 0xfc, 0xa9, 0x99, 0x7f, 0xf2, 0x4c,
	0x69, 0xff, 0xae, 0xf1, 0xc3, 0x56, 0xd5, 0x13, 0xce, 0xa8, 0x04, 0x56, 0xc8, 0xf5, 0x6d, 0x8d,
	0xed, 0x35, 0x61, 0xf3, 0xe7, 0x5e, 0x2b, 0xec, 0x7d, 0xfe, 0x81, 0xad, 0x10, 0x29, 0xe6, 0x9d,
	0x26, 0xec, 0x8f, 0xe8, 0x08, 0x56, 0x05, 0x2d, 0x21, 0x8d, 0x14, 0xeb, 0xdc, 0xd5, 0xaa, 0x83,
	0x7f, 0x54, 0xdf, 0xee, 0xb7, 0x3a, 0xc1, 0x9b, 0x1a, 0x5b, 0xb7, 0x35, 0x3e, 0x69, 0xba, 0xb7,
	0xab, 0xbd, 0x6b, 0xd5, 0xbe, 0x6f, 0x28, 0x55, 0x62, 0x7f, 0x40, 0xfd, 0xfd, 0xde, 0x44, 0xc5,
	0x9c, 0x7b, 0xff, 0x61, 0x6b, 0xc8, 0x34, 0x7c, 0x53, 0x31, 0xfb, 0x0c, 0xdd, 0xd7, 0xf7, 0x8a,
	0x60, 0x55, 0xf0, 0x1c, 0x72, 0xe9, 0x74, 0x87, 0xd6, 0xe8, 0x20, 0x3c, 0xd6, 0xec, 0x4b, 0x43,
	0x7a, 0x67, 0xa8, 0x7b, 0x49, 0x4a, 0xc2, 0xc4, 0xfe, 0xc8, 0x05, 0xa9, 0x04, 0xe8, 0x23, 0x1f,
	0xea, 0x23, 0x5f, 0x2a, 0x3c, 0x79, 0xb5, 0xd9, 0xba, 0xd6, 0xcd, 0xd6, 0xb5, 0x7e, 0x6e, 0x5d,
	0xeb, 0x7a, 0xe7, 0x76, 0x6e, 0x76, 0x6e, 0xe7, 0xdb, 0xce, 0xed, 0xbc, 0x1f, 0xb7, 0x9c, 0xaa,
	0xb7, 0x3b, 0xce, 0x41, 0x2e, 0x79, 0x79, 0xa5, 0x41, 0xb0, 0xb8, 0x08, 0x56, 0xed, 0x77, 0x1f,
	0x77, 0xf5, 0xde, 0x2e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xac, 0xa7, 0xa1, 0x0b, 0x12, 0x03,
	0x00, 0x00,
}

func (m *RateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomExponent != 0 {
		i = encodeVarintIbcRateLimit(dAtA, i, uint64(m.DenomExponent))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.OutflowSum.Size()
		i -= size
		if _, err := m.OutflowSum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIbcRateLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ExpiredTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiredTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiredTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintIbcRateLimit(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimeWindow, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeWindow):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintIbcRateLimit(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.OutflowLimit.Size()
		i -= size
		if _, err := m.OutflowLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIbcRateLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintIbcRateLimit(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcPause {
		i--
		if m.IbcPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIbcRateLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovIbcRateLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovIbcRateLimit(uint64(l))
	}
	l = m.OutflowLimit.Size()
	n += 1 + l + sovIbcRateLimit(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeWindow)
	n += 1 + l + sovIbcRateLimit(uint64(l))
	if m.ExpiredTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiredTime)
		n += 1 + l + sovIbcRateLimit(uint64(l))
	}
	l = m.OutflowSum.Size()
	n += 1 + l + sovIbcRateLimit(uint64(l))
	if m.DenomExponent != 0 {
		n += 1 + sovIbcRateLimit(uint64(m.DenomExponent))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcPause {
		n += 2
	}
	return n
}

func sovIbcRateLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIbcRateLimit(x uint64) (n int) {
	return sovIbcRateLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimeWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiredTime == nil {
				m.ExpiredTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiredTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowSum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomExponent", wireType)
			}
			m.DenomExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DenomExponent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IbcPause = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIbcRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIbcRateLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIbcRateLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIbcRateLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIbcRateLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIbcRateLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIbcRateLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIbcRateLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIbcRateLimit = fmt.Errorf("proto: unexpected end of group")
)
