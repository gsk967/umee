syntax = "proto3";
package umee.ibcratelimit.v1beta1;


import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "umee/ibc_rate_limit/v1beta1/ibc_rate_limit.proto";

option go_package = "github.com/umee-network/umee/v3/x/ibc-rate-limit/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.messagename_all)     = true;

// Msg defines the x/ibctransfer module's Msg service.
service Msg {
    // UpdateIBCDenomsRateLimit adds new rate limits for ibc denoms or 
    // updates the rate limits for existed ibc denoms.
    rpc UpdateIBCDenomsRateLimit(MsgUpdateIBCDenomsRateLimit) returns (MsgUpdateIBCDenomsRateLimitResponse);
}

// MsgUpdateIBCDenomsRateLimit defines the Msg/UpdateIBCDenomsRateLimit request type.
message MsgUpdateIBCDenomsRateLimit {
    // option (gogoproto.equal)            = true;
    option (gogoproto.goproto_getters)  = false;
    option (gogoproto.goproto_stringer) = false;
    option (cosmos.msg.v1.signer) = "authority";

    // authority is the address of the governance account.
    string         authority   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string         title       = 2;
    string         description = 3;
    // new_ibc_denoms_rate_limits defines the rate limits for ibc denoms tokens.
    repeated RateLimit new_ibc_denoms_rate_limits = 4 [(gogoproto.nullable) = false];
     // update_ibc_denoms_rate_limits defines the new rate limits for ibc denoms tokens.
    repeated RateLimit update_ibc_denoms_rate_limits = 5 [(gogoproto.nullable) = false];
}

// MsgUpdateIBCDenomsRateLimitResponse defines the Msg/UpdateIBCDenomsRateLimit response type.
message MsgUpdateIBCDenomsRateLimitResponse {};
